version: 2.1
orbs:
  python: circleci/python@2.1.1
  gcp-cli: circleci/gcp-cli@3.2.2

commands:
  sonarcloud-scan:
    description: Detect bugs and vulnerabilities
    parameters:
      cache_version:
        default: 1
        description: increment this value if the cache is corrupted and you want to start with a clean cache
        type: integer
      project_root:
        default: .
        description: the root of the project that should be analyzed (relative to the root directory of the repository)
        type: string
      sonar_token_variable_name:
        default: SONAR_TOKEN
        description: the name of the environment variable where the SonarCloud API token is stored
        type: env_var_name
    steps:
      - run:
          name: Create cache directory if it doesn't exist
          command: mkdir -p /tmp/cache/scanner
      - run:
          name: SonarCloud Scan
          command: |
            set -e
            VERSION=6.2.0.4584
            SONAR_TOKEN=$<<parameters.sonar_token_variable_name>>
            SCANNER_DIRECTORY=/tmp/cache/scanner
            export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
            OS="linux"
            ARCH="x64"
            echo $SONAR_USER_HOME

            if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner" ]]; then
              curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS-$ARCH.zip
              unzip -qq -o sonar-scanner-cli-$VERSION-$OS-$ARCH.zip -d $SCANNER_DIRECTORY
              rm sonar-scanner-cli-$VERSION-$OS-$ARCH.zip

              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner
              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/jre/bin/java
            fi

            API_URL="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls?head=${CIRCLE_PROJECT_USERNAME}:${CIRCLE_BRANCH}"

            RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" "${API_URL}")

            PR_COUNT=$(echo "${RESPONSE}" | jq '. | length')

            if [[ "${PR_COUNT}" -eq 0 ]]; then
              echo "No pull requests found for branch '${CIRCLE_BRANCH}'. Skipping pull request analysis."
            elif [[ "${PR_COUNT}" -eq 1 ]]; then
              PR_NUMBER=$(echo "${RESPONSE}" | jq -r '.[0].number')
              PR_BASE_BRANCH=$(echo "${RESPONSE}" | jq -r '.[0].base.ref')
              echo "Pull request number for branch '${CIRCLE_BRANCH}': ${PR_NUMBER}"
              export SONARQUBE_SCANNER_PARAMS="{\"sonar.pullrequest.key\":\"${PR_NUMBER}\",\"sonar.pullrequest.branch\":\"${CIRCLE_BRANCH}\",\"sonar.pullrequest.base\":\"${PR_BASE_BRANCH}\"}"
            else
              echo "Warning: ${PR_COUNT} pull requests found for branch '${CIRCLE_BRANCH}'. Skipping pull request analysis."
            fi

            echo $SONARQUBE_SCANNER_PARAMS

            cd <<parameters.project_root>>
            $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS-$ARCH/bin/sonar-scanner

jobs:
  build-test:
    executor:
      name: python/default
      tag: "3.12"
    resource_class: medium
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          pypi-cache: false
      - run:
          name: Lint (flake8)
          command: flake8
          when: always
      - run:
          name: Lint (mypy)
          command: mypy --strict .
          when: always
      - run:
          name: Test
          command: |
            coverage run
            coverage xml
            coverage report
          when: always
      - sonarcloud-scan

  deploy-dev:
    machine:
      image: ubuntu-2204:current
    resource_class: medium
    steps:
      - checkout
      - run :
          name: Build container image
          command: docker build -t $DEV_GCP_REGION-docker.pkg.dev/$DEV_GCP_PROJECT_ID/$DEV_GCP_REPO_NAME/service-client:$CIRCLE_SHA1 .
      - gcp-cli/setup:
          use_oidc: true
          google_project_id: DEV_GCP_PROJECT_ID
          google_project_number: DEV_GCP_PROJECT_NUMBER
          workload_identity_pool_id: DEV_GCP_WIP_ID
          workload_identity_pool_provider_id: DEV_GCP_WIP_PROVIDER_ID
          service_account_email: DEV_GCP_SERVICE_ACCOUNT_EMAIL
      - run:
          name: Setup Docker credentials
          command: gcloud auth configure-docker $DEV_GCP_REGION-docker.pkg.dev
      - run:
          name: Upload container image
          command: docker push $DEV_GCP_REGION-docker.pkg.dev/$DEV_GCP_PROJECT_ID/$DEV_GCP_REPO_NAME/service-client:$CIRCLE_SHA1
      - run:
          name: Deploy to Cloud Run
          command: gcloud run deploy client --region $DEV_GCP_REGION --image=$DEV_GCP_REGION-docker.pkg.dev/$DEV_GCP_PROJECT_ID/$DEV_GCP_REPO_NAME/service-client:$CIRCLE_SHA1

workflows:
  cicd:
    jobs:
      - build-test
      - deploy-dev:
          context: gcp
          requires:
            - build-test
          filters:
            branches:
              only:
                - develop
